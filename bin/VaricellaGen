#!/usr/bin/env bash

. "$CONDA_PREFIX/etc/profile.d/conda.sh" # enable activation of the conda environment within script

conda activate base

### Required arguments
output_dir="" # outout directory
forward_read="" # forward read
reverse_read="" # reverse read
consensus="" # consensus file
varcall=false # variant call option: this performs only variant calling
all=false # This runs the whole pipeline
phylogeny=false # resistance profiling
cores=16 # get number of cpus to use
version="1.0"

#if [ $# == 0 ]
#then
#    usage
#    exit 1
#fi

while [[ $# -gt 0 ]]
do
        case "$1" in
                --output-dir|-o)
                        output_dir="$2"
                        shift 2
                        ;;
                --forward-read|-f)
                        forward_read="$2"
                        shift 2
                        ;;
                --reverse-read|-r)
                        reverse_read="$2"
                        shift 2
                        ;;
		--consensus)
			consensus="$2"
			shift 2
			;;
		--varcall)
			varcall=true
			shift 2
			;;
		--all)
			all=true
			shift 2
			;;
		--phylogeny)
			phylogeny=true
			shift 2
			;;
		--cores)
			cores="$2"
			shift 2
			;;
#    		-h|--help)
#        		usage
#        		exit 1
#        		;;
    		-v|--version)
        		echo "This is VaricellaGen version $version"
        		exit 1
        		;;
#    		-x|--citation)
#        		echo -e "\nIf using HIV-DRIVES, please cite:"
#			echo -e "HIV-DRIVES: HIV Drug Resistance Identification, Variant Evaluation, and Surveillance\nsierra-local: A lightweight standalone application for drug resistance prediction. Jasper C Ho, Garway T Ng, Mathias Renaud, Art FY Poon, (2019). Journal of Open Source Software, 4(33), 1186, https://doi.org/10.21105/joss.01186\nhttps://github.com/phac-nml/quasitools"
#        		exit 1
#        		;;
                *)
                        echo "Invalid option: $1" >&2
			echo "Wrong Usage"
                        exit 1
                        ;;
	esac
done

# Validate required options
if [[ -z $output_dir ]]
then
        echo "Missing output directory" >&2
        echo "add output directory"
        exit 1
fi

# create the required directories
#mkdir -p $output_dir/results
#mkdir -p $output_dir/results/{qc,alignment,variants,consensus,clade,assembly}

# Check if the files exist
exist_p() {
	if [ -e "$forward_read" ] && [ -s "$forward_read" ] && [ -e "$reverse_read" ] && [ -s "$reverse_read" ]
	then
    		echo -e "Both reads exist and are not empty.\n We shall proceed to the downstream analysis"
	else
    		echo "One or more reads do not exist or are empty."
	fi
}

## Test the exist_p function
exist_p  ## the function works well


# Function to perform quality assessment on paired-end files
run_fastqc_p() {
	# Output directory for FastQC results
	conda activate sarscov
    	output="$output_dir/results/qc"
	mkdir -p $output/trimmed_fastqs
	fastqc $forward_read $reverse_read -o $output/
	trim_galore -q 28 --fastqc --paired $forward_read $reverse_read --output_dir $output/trimmed_fastqs
	echo "Quality assessment complete. Results are saved in the '$output' directory."
}

run_fastqc_p  ## the function works well


# Function to perform alignment
run_alignment_p() {
	conda activate sarscov
	R1="*_val_1.fq.gz"
	R2="*_val_2.fq.gz"
	output="$output_dir/results/alignment"
	mkdir -p $output
	id=$(echo $forward_read | awk -F"/" '{print $NF}' | cut -f1 -d"_")
	bwa mem -t $cores ${HOME}/VaricellaGen/references/zoster.fasta $output_dir/results/qc/trimmed_fastqs/$R1 $output_dir/results/qc/trimmed_fastqs/$R2 | \
	samtools sort -o $output_dir/results/alignment/${id}.zoster.sorted.bam
	samtools view -F4 $output_dir/results/alignment/${id}.zoster.sorted.bam -o $output_dir/results/alignment/${id}.zoster.sorted.mapped.bam
        samtools sort -o $output_dir/results/alignment/${id}.zoster.sorted.mapped.sorted.bam $output_dir/results/alignment/${id}.zoster.sorted.mapped.bam
	samtools index $output_dir/results/alignment/${id}.zoster.sorted.mapped.sorted.bam
}

run_alignment_p ## the function works well

# Function to perform variant calling
run_var_p() {
	conda activate mpxv
	id=$(echo $forward_read | awk -F"/" '{print $NF}' | cut -f1 -d"_")
	output="$output_dir/results/variants"
	mkdir -p $output
	input="$output_dir/results/alignment/${id}.zoster.sorted.mapped.sorted.bam"
	freebayes -p 1 -f ${HOME}/VaricellaGen/references/zoster.fasta -F 0.2 -C 1 --pooled-continuous --min-coverage 10 --gvcf --gvcf-dont-use-chunk true $input > $output/${id}_zoster.gvcf
	vt decompose_blocksub $output/${id}_zoster.gvcf -o $output/${id}_zoster_decompose.vcf
	conda activate pysam
	process_gvcf.py -d 10 -l 0.25 -u 0.75 -m $output/${id}_zoster.mask.txt -v $output/${id}_zoster.variants.vcf -c $output/${id}_zoster.consensus.vcf $output/${id}_zoster.gvcf
	conda activate sarscov
	bcftools norm -D -d all -f ${HOME}/VaricellaGen/references/zoster.fasta $output/${id}_zoster.variants.vcf > $output/${id}_zoster.variants.norm.vcf
	bcftools norm -D -d all -f ${HOME}/VaricellaGen/references/zoster.fasta $output/${id}_zoster.consensus.vcf > $output/${id}_zoster.consensus.norm.vcf
	cat $output/${id}_zoster.consensus.norm.vcf | awk -v vartag=ConsensusTag=ambiguous '$0 ~ /^#/ || $0 ~ vartag' > $output/${id}_zoster.ambiguous.norm.vcf
	bgzip -f $output/${id}_zoster.ambiguous.norm.vcf
	tabix -f -p vcf $output/${id}_zoster.ambiguous.norm.vcf.gz
	cat $output/${id}_zoster.consensus.norm.vcf | awk -v vartag=ConsensusTag=fixed '$0 ~ /^#/ || $0 ~ vartag' > $output/${id}_zoster.fixed.norm.vcf
	bgzip -f $output/${id}_zoster.fixed.norm.vcf
	tabix -f -p vcf $output/${id}_zoster.fixed.norm.vcf.gz
	bcftools consensus -f ${HOME}/VaricellaGen/references/zoster.fasta -I $output/${id}_zoster.ambiguous.norm.vcf.gz > $output/${id}_zoster.ambiguous.fa
	CTG_NAME=$(head -n1 ${HOME}/VaricellaGen/references/zoster.fasta | sed 's/>//')
	bcftools consensus -f $output/${id}_zoster.ambiguous.fa -m $output/${id}_zoster.mask.txt $output/${id}_zoster.fixed.norm.vcf.gz | sed "s/$CTG_NAME/$id/" > $output/${id}_zoster.consensus.fa
	mkdir -p $output_dir/results/consensus
	mv $output/*consensus*fa $output_dir/results/consensus
	#calculate genome coverage and n content
	ncnt=$(grep -v ">" $output_dir/results/consensus/*fa | grep -o N | wc -l)
	nuccnt=$(grep -v ">" $output_dir/results/consensus/*fa | grep -o [AGTC] | wc -l)
	nper=$(echo "scale = 2; $ncnt*100 / 124884" | bc -l)
	nucper=$(echo "scale = 2; $nuccnt*100 / 124884" | bc -l)
	echo "id,genome coverage,N content" > $output_dir/results/consensus/metrics.csv
	echo "$id,$nucper,$nper" >> $output_dir/results/consensus/metrics.csv
}

run_var_p

# Function to perform clade typing
run_typing_p() {
	id=$(echo $forward_read | awk -F"/" '{print $NF}' | cut -f1 -d"_")
	output="$output_dir/results/clade"
	mkdir -p $output
	clade=$(head -n1 ${HOME}/VaricellaGen/databases/new_scheme.txt | cut -d',' -f2- | sed 's/,/\n/g' | grep -wf - $output_dir/results/variants/${id}_zoster_decompose.vcf  | cut -f2,4,5  | sed 's/<\*>/ref/' | awk '{print $2$1$3}' | sed -z 's/\n/,/g; s/,$/\n/' | grep -f - ${HOME}/VaricellaGen/databases/new_scheme.txt | cut -f1 -d"," | sed 's/.*/Clade &/')
	echo "id,clade" > $output/clade.csv
	echo "$id,$clade" >> $output/clade.csv
}

run_typing_p

# Function to perform phylogeny
run_tree_p() {
	id=$(echo $output_dir | awk -F"/" '{print $NF}')
	input=$consensus
	output="$output_dir/results/phylogeny"
	mkdir -p "$output_dir/results/phylogeny/{msa,tree}"
	mafft --thread $cores $input > $output/msa/${id}.aln.fa
	iqtree2 -s $output/msa/${id}.aln.fa -T $cores -m TEST -czb -B 1000 --quiet
}

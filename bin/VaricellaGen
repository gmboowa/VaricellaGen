#!/usr/bin/env bash

#. "$CONDA_PREFIX/etc/profile.d/conda.sh" # enable activation of the conda environment within script

#conda activate base

### Required arguments
output_dir="" # outout directory
forward_read="" # forward read
reverse_read="" # reverse read
consensus="" # consensus file
varcall=false # variant call option: this performs only variant calling
all=false # This runs the whole pipeline
phylogeny=false # resistance profiling
cores=16 # get number of cpus to use
version="1.0"

#if [ $# == 0 ]
#then
#    usage
#    exit 1
#fi

while [[ $# -gt 0 ]]
do
        case "$1" in
                --output-dir|-o)
                        output_dir="$2"
                        shift 2
                        ;;
                --forward-read|-f)
                        forward_read="$2"
                        shift 2
                        ;;
                --reverse-read|-r)
                        reverse_read="$2"
                        shift 2
                        ;;
		--consensus)
			consensus="$2"
			shift 2
			;;
		--varcall)
			varcall=true
			shift 2
			;;
		--all)
			all=true
			shift 2
			;;
		--phylogeny)
			resistance=true
			shift 2
			;;
		--cores)
			cores="$2"
			shift 2
			;;
#    		-h|--help)
#        		usage
#        		exit 1
#        		;;
    		-v|--version)
        		echo "This is VaricellaGen version $version"
        		exit 1
        		;;
#    		-x|--citation)
#        		echo -e "\nIf using HIV-DRIVES, please cite:"
#			echo -e "HIV-DRIVES: HIV Drug Resistance Identification, Variant Evaluation, and Surveillance\nsierra-local: A lightweight standalone application for drug resistance prediction. Jasper C Ho, Garway T Ng, Mathias Renaud, Art FY Poon, (2019). Journal of Open Source Software, 4(33), 1186, https://doi.org/10.21105/joss.01186\nhttps://github.com/phac-nml/quasitools"
#        		exit 1
#        		;;
                *)
                        echo "Invalid option: $1" >&2
			echo "Wrong Usage"
                        exit 1
                        ;;
	esac
done

# Validate required options
if [[ -z $output_dir ]]
then
        echo "Missing output directory" >&2
        echo "add output directory"
        exit 1
fi

# create the required directories
#mkdir -p $output_dir/results
#mkdir -p $output_dir/results/{qc,alignment,variants,consensus,clade,assembly}

# Check if the files exist
exist_p() {
	if [ -e "$forward_read" ] && [ -s "$forward_read" ] && [ -e "$reverse_read" ] && [ -s "$reverse_read" ]
	then
    		echo -e "Both reads exist and are not empty.\n We shall proceed to the down stream analysis"
	else
    		echo "One or more reads do not exist or are empty."
	fi
}

## Test the exist_p function
#exist_p  ## the function works well


# Function to perform quality assessment on paired-end files
run_fastqc_p() {
	# Output directory for FastQC results
    	output="$output_dir/results/qc"
	mkdir -p $output/trimmed_fastqs
	fastqc $forward_read $reverse_read -o $output/
	trim_galore -q 28 --fastqc --paired $forward_read $reverse_read --output_dir $output/trimmed_fastqs
	echo "Quality assessment complete. Results are saved in the '$output' directory."
}

#run_fastqc_p  ## the function works well
